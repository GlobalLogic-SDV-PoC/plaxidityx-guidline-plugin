name: gv_demo_action
description: Automated Vulnerabilities check powered by PlaxidityX Code Security Manager
inputs:
  CONTAINER_REGISTRY:
    description: "Docker container registry (e.g., ghcr.io)"
    required: true
  CONTAINER:
    description: "Docker container name (e.g., ubuntu:latest)"
    required: true
  REPO_NAME:
    description: "Repository name (e.g., org/project)"
    required: true
  BRANCH_NAME:
    description: "Branch name"
    required: true
  COMMIT_HASH:
    description: "Commit hash"
    required: true
  PATH_TO_CODE:
    description: "Path to root folder of C/C++ project"
    required: true
  PATH_TO_BUILDING_SCRIPT:
    description: "Relative path to build script from PATH_TO_CODE"
    required: true
  AUTH_URL:
    description: "URL to authentication service"
    required: true
  APP_URL:
    description: "URL to VVM endpoint"
    required: true
  USERNAME:
    description: "Username for authentication"
    required: true
  PASSWORD:
    description: "Password for authentication"
    required: true
  TOKEN:
    description: "GitHub token with access to this repo"
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout self
      uses: actions/checkout@v4
      with:
        repository: GlobalLogic-SDV-PoC/plaxidityx-guidline-plugin
        token: ${{ inputs.TOKEN }}
        path: self
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: amd64
    - name: Run in container
      uses: addnab/docker-run-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ inputs.TOKEN }}
        registry: ${{ inputs.CONTAINER_REGISTRY }}
        image: ${{ inputs.CONTAINER }}
        options: -v ${{ github.workspace }}:/workspace --privileged
        run: |
          cd /workspace
          apt -qq update && apt -qq install -y binfmt-support   \
                                               wget             \
                                               unzip            \
                                               libmagic1        \
                                               python3-pip
          mount -t binfmt_misc binfmt_misc /proc/sys/fs/binfmt_misc/
          python3 -m pip install --upgrade pip
          python3 -m pip install requests python-magic libmagic

          echo "Install latest QEMU"
          mkdir -p /tmp/qemu
          wget --no-verbose http://ports.ubuntu.com/pool/universe/q/qemu/qemu-user_9.2.1+ds-1ubuntu5_arm64.deb -O /tmp/qemu/qemu-user.deb
          wget --no-verbose http://ports.ubuntu.com/pool/universe/q/qemu/qemu-user-binfmt_9.2.1+ds-1ubuntu5_arm64.deb -O /tmp/qemu/qemu-user-binfmt.deb
          wget --no-verbose http://ports.ubuntu.com/pool/universe/q/qemu/qemu-user-static_9.2.1+ds-1ubuntu5_arm64.deb -O /tmp/qemu/qemu-user-static.deb
          apt -qq install -y /tmp/qemu/*.deb

          echo "Install required amd64 libraries"
          dpkg --add-architecture amd64
          cp -a self/codeql/apt.amd64.list /etc/apt/sources.list.d/amd64.list
          apt -qq update || apt -qq install -y libc6:amd64 libz1:amd64

          systemctl restart systemd-binfmt

          echo "Download CodeQL CLI: ~/.codeql/cl"
          wget --no-verbose https://github.com/github/codeql-cli-binaries/releases/download/v2.22.0/codeql-linux64.zip -O /tmp/codeql.zip
          mkdir -p ~/.codeql/cli && unzip -q /tmp/codeql.zip -d ~/.codeql/cli && rm -rf /tmp/codeql.zip

          echo "Create output directory: ./output"
          mkdir -p output
          python3 self/wrap.py "$(realpath "${{ inputs.PATH_TO_CODE }}")" "$(realpath "${{ inputs.PATH_TO_BUILDING_SCRIPT }}")" "${{ inputs.REPO_NAME }}" "${{ inputs.BRANCH_NAME }}" "${{ inputs.COMMIT_HASH }}" "${{ inputs.AUTH_URL }}" "${{ inputs.APP_URL }}" "${{ inputs.USERNAME }}" "${{ inputs.PASSWORD }}"
